{"version":3,"file":"commands.js","mappings":"YACA,ICeIA,EDfAC,EAAsB,GCoC1B,SAASC,EAAaC,GAGpBH,EAASI,YACTJ,EAAW,KCzCbC,EAAoBI,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,GDOxBC,OAAOC,WAAa,SAAUC,KAG9BF,OAAOG,SAAQ,gBAmCU,oBAATC,KACVA,KACkB,oBAAXL,OACPA,YACkB,IAAXM,EAAAA,EACPA,EAAAA,OACAC,GAMJC,UApCF,SAAmBC,GAGjBnB,EAAWmB,EAGX,IAAIC,EAAM,IAAIC,IAAI,iBAAiBC,WAAWZ,OAAOa,UAAUC,WAI/Db,OAAOc,QAAQC,GAAGC,mBAAmBP,EAHjB,CAAEQ,OAAQ,GAAIC,MAAO,GAAIC,iBAAiB,IAGL,SAASC,GAC/CA,EAAOC,MACTC,gBAAgBtB,OAAOuB,UAAUC,oBAAqBjC,O","sources":["webpack:///webpack/bootstrap?","webpack:///./src/commands/commands.js?","webpack:///webpack/runtime/global?"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global global, Office, self, window */\r\n\r\nOffice.initialize = function (reason) {\r\n};\r\n\r\nOffice.onReady(() => {\r\n  // If needed, Office.js is ready to be called\r\n});\r\n\r\n\r\nvar settingsDialog;\r\nvar btnEvent;\r\n/**\r\n * Shows a popup saying \"Hello World\" when the command is executed.\r\n * @param event {Office.AddinCommands.Event}\r\n */\r\nfunction showPopUp(event) {\r\n\r\n  //Saved out of scope, so that the event can be finished after dialog is closed\r\n  btnEvent = event;\r\n\r\n  // DialogOptions to specify the Dialog and Url to the Dialog's html \r\n  var url = new URI('./dialog.html').absoluteTo(window.location).toString();\r\n  var dialogOptions = { height: 40, width: 30, displayInIframe: true };\r\n\r\n  // Display the dialog\r\n  Office.context.ui.displayDialogAsync(url, dialogOptions, function(result){\r\n    settingsDialog = result.value;\r\n    settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\r\n  });\r\n}\r\n\r\nfunction dialogClosed(message) {\r\n  settingsDialog = null;\r\n  // Be sure to indicate when the add-in command function is complete\r\n  btnEvent.completed();\r\n  btnEvent = null;\r\n}\r\n\r\nfunction getGlobal() {\r\n  return typeof self !== \"undefined\"\r\n    ? self\r\n    : typeof window !== \"undefined\"\r\n    ? window\r\n    : typeof global !== \"undefined\"\r\n    ? global\r\n    : undefined;\r\n}\r\n\r\nconst g = getGlobal();\r\n\r\n// The add-in command functions need to be available in global scope\r\ng.showPopUp = showPopUp;\r\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["btnEvent","__webpack_require__","dialogClosed","message","completed","g","globalThis","this","Function","e","window","Office","initialize","reason","onReady","self","global","undefined","showPopUp","event","url","URI","absoluteTo","location","toString","context","ui","displayDialogAsync","height","width","displayInIframe","result","value","addEventHandler","EventType","DialogEventReceived"],"sourceRoot":""}